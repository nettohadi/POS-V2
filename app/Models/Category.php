<?php

namespace App\Models;

use App\Exceptions\ApiActionException;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use App\Models\Base\BaseModel;

class Category extends BaseModel
{
    use HasFactory;
    protected $guarded = [];

    public function type(){
        return $this->belongsTo(Type::class);
    }

    public function products()
    {
        return $this->hasMany(Product::class);
    }

    public function scopeFilterByName($query, $name){

        if(empty($name)) return $query;

        return $query->where('name','like',"%{$name}%");
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::deleting(function ($model){ self::checkBeforeDeleting($model);});
    }

    public static function checkBeforeDeleting($model){
        //if category has one or more products, throw exception
        if($model->products->first()){

            $params['parent'] = __('validation.attributes.category');
            $params['child'] = __('validation.attributes.product');;

            throw new ApiActionException(__('blockedAction.deletion',$params));
        }
    }
}
